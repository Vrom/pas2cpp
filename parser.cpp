
/*  A Bison parser, made from parser.grm
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	CONSTANT	258
#define	UNIT	259
#define	PROGRAM	260
#define	USES	261
#define	INTERFACE	262
#define	IMPLEMENTATION	263
#define	INITIALIZATION	264
#define	FINALIZATION	265
#define	LABEL	266
#define	TYPE	267
#define	CONST	268
#define	VAR	269
#define	ABSOLUTE	270
#define	FUNCTION	271
#define	PACKED	272
#define	FILE	273
#define	SET	274
#define	ARRAY	275
#define	OF	276
#define	FIELDED	277
#define	VISIBILITY	278
#define	PROPERTY	279
#define	STRING	280
#define	EXTERNAL	281
#define	FORWARD	282
#define	c_str	283
#define	END	284
#define	ASMSTMT	285
#define	GOTO	286
#define	RAISE	287
#define	IF	288
#define	THEN	289
#define	ELSE	290
#define	FOR	291
#define	TO	292
#define	DOWNTO	293
#define	DO	294
#define	WHILE	295
#define	REPEAT	296
#define	UNTIL	297
#define	CASE	298
#define	WITH	299
#define	TRY	300
#define	FINALLY	301
#define	EXCEPT	302
#define	ON	303
#define	INHERITED	304
#define	COMPARE	305
#define	EQ	306
#define	TWOFULLSTOP	307
#define	IN	308
#define	IS	309
#define	OR	310
#define	XOR	311
#define	MOD	312
#define	DIV	313
#define	AND	314
#define	SHIFT	315
#define	AS	316
#define	NOT	317


#undef FILE

#define YYDEBUG 0

#include "ioutils.h"

#pragma hdrstop

enums_t enums;
stringlist_t hpps;
namespace
{
char *p;
string type_name, class_name, vars, wrk_func_name, wrk_func_params,
  func_name, func_rtype, last_partype;
char *const_types[] =
{
  "@unknown@",
  "bool",
  "int",
  "double",
  "void *",
  "char",
  "AnsiString"
};
int gn_cnt, section;
bool in_intf, in_arrbrack, stmt_need;
stringlist_t msg_hndlrs, units;
stringlist_t::iterator slst_p;
enum_descr_t *enum_descr_p;
}
//---------------------------------------------------------------------------
#define use_srcunit units.push_back(src_name)
#define POST_ERROR yyerrok; newline(); \
  write_cpp("/" "* HERE WAS AN ERROR; continue from line %i */", line_no);
#define max(a, b) ((a) > (b) ? (a) : (b))
//---------------------------------------------------------------------------
string &make_list(string &src)
{
  return tmp_string.assign(src.c_str(), src.length() - 2);
}
//---------------------------------------------------------------------------
string &make_list(string &src, const string &prefix, bool needpostfix)
{
  int i;
  p = const_cast<char *>(src.c_str());
  tmp_string.clear();
  while (*p)
  {
    for (i = 0; p[i] != ','; i++);
    tmp_string += prefix + string(p, i) +
      (needpostfix ? ", const int " + string(p, i) + "_Size" : string("")) +
      ", ";
    p += i + 2;
  }
  tmp_string.resize(tmp_string.length() - 2);
  return tmp_string; 
}
//---------------------------------------------------------------------------
string &gen_name(void)
{
  return tmp_string = src_name + "__" + itoa(++gn_cnt, buf, 10);
}
//---------------------------------------------------------------------------
void check_name(void)
{
  if (type_name.empty()) type_name = gen_name();
}
//---------------------------------------------------------------------------
void print_asm(void)
{
  newline();
  write_cpp("asm");
  newline();
  write_cpp("{");
  indent++;
  while (*p)
  {
    int i;
    for (i = 0; p[i] != '\x01'; i++);
    p[i] = '\0';
    if (i)
    {
      newline();
      write_cpp("%s", p);
    }
    p += i + 1;
  }
  indent--;
  newline();
  write_cpp("}");
}
//---------------------------------------------------------------------------
void find_enum_descr(string name)
{
  enum_descr_p = &enums[strupr(&name[0])];
  if (*enum_descr_p->lower.c_str() == '@')
    yywarning("unknown range");
}
//---------------------------------------------------------------------------
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		490
#define	YYFLAG		-32768
#define	YYNTBASE	79

#define YYTRANSLATE(x) ((unsigned)(x) <= 317 ? yytranslate[x] : 201)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    76,
    77,    65,    61,    52,    62,    78,    66,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    54,    51,     2,
    53,     2,     2,    73,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    74,     2,    75,    58,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    55,    56,    57,    59,    60,    63,
    64,    67,    68,    69,    70,    71,    72
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     2,    11,    12,    13,    14,    31,    32,    36,
    37,    38,    42,    43,    44,    48,    49,    50,    55,    57,
    61,    63,    67,    68,    71,    74,    75,    78,    81,    85,
    86,    92,    93,    98,   100,   102,   104,   106,   108,   112,
   118,   122,   126,   128,   134,   137,   141,   143,   149,   157,
   160,   164,   166,   167,   173,   177,   178,   182,   185,   189,
   193,   195,   197,   202,   205,   208,   212,   214,   215,   220,
   222,   223,   227,   228,   234,   235,   240,   242,   246,   250,
   251,   256,   257,   258,   267,   268,   274,   277,   280,   284,
   288,   289,   292,   294,   298,   299,   303,   305,   307,   308,
   315,   316,   319,   323,   326,   331,   333,   336,   345,   346,
   349,   350,   354,   355,   357,   359,   362,   363,   367,   369,
   373,   375,   378,   380,   384,   385,   392,   399,   404,   406,
   410,   414,   416,   420,   422,   424,   427,   429,   432,   436,
   438,   442,   450,   451,   453,   454,   456,   458,   462,   463,
   467,   472,   473,   476,   480,   482,   486,   491,   492,   495,
   496,   498,   500,   501,   503,   508,   513,   515,   518,   520,
   524,   525,   531,   534,   537,   538,   539,   543,   544,   549,
   551,   554,   555,   561,   566,   569,   571,   573,   577,   579,
   580,   585,   586,   592,   593,   600,   601,   611,   612,   618,
   619,   625,   627,   630,   631,   635,   636,   639,   641,   643,
   646,   648,   650,   653,   656,   660,   661,   669,   670,   676,
   677,   681,   683,   685,   687,   689,   690,   695,   696,   699,
   700,   705,   708,   711,   713,   716,   717,   723,   725,   728,
   733,   738,   742,   745,   748,   752,   754,   758,   760,   764,
   768,   772,   776,   778,   780,   783,   787,   791,   795,   799,
   803,   807,   811,   815,   818,   821,   825,   829,   833,   836,
   840,   841,   843,   847,   849,   853,   855
};

static const short yyrhs[] = {    -1,
     0,    85,    80,    95,    29,    81,   159,   158,    78,     0,
     0,     0,     0,     5,     3,    51,    82,     8,    90,    94,
     9,    83,    90,    84,    95,    86,    88,    30,    78,     0,
     0,     6,     3,    51,     0,     0,     0,    10,    87,   159,
     0,     0,     0,    11,    89,   159,     0,     0,     0,     7,
    91,    92,    51,     0,    93,     0,    92,    52,    93,     0,
     3,     0,     3,    59,     4,     0,     0,    94,   100,     0,
    94,   147,     0,     0,    95,   100,     0,    95,    96,     0,
    95,     1,    51,     0,     0,   147,    97,    95,    98,    51,
     0,     0,    29,    99,   159,   158,     0,   172,     0,   104,
     0,   102,     0,   103,     0,   101,     0,   147,    28,    51,
     0,   147,    27,   196,   106,    51,     0,    12,   198,    51,
     0,    12,     1,    51,     0,    14,     0,   102,     3,    56,
   196,    51,     0,   102,   139,     0,   102,     1,    51,     0,
    15,     0,   103,   146,    54,   108,    51,     0,   103,   146,
    54,   108,    16,   194,    51,     0,   103,   139,     0,   103,
     1,    51,     0,    13,     0,     0,   104,     3,    56,   105,
   107,     0,   104,     1,    51,     0,     0,   106,     3,   196,
     0,   108,    51,     0,    13,   108,    51,     0,    23,   123,
    51,     0,   113,     0,    26,     0,    26,    74,   196,    75,
     0,    58,    26,     0,    58,   194,     0,    23,    22,     3,
     0,    19,     0,     0,    19,    22,   109,   108,     0,   114,
     0,     0,    18,   110,   114,     0,     0,    17,   111,   152,
   149,   121,     0,     0,    20,    22,   112,   113,     0,   194,
     0,    76,   120,    77,     0,   197,    57,   197,     0,     0,
    21,    22,   115,   108,     0,     0,     0,    21,    74,   116,
   122,    75,   117,    22,   108,     0,     0,    23,   123,   118,
   124,    30,     0,    54,   194,     0,    54,    26,     0,     3,
    52,     3,     0,   120,    52,     3,     0,     0,    22,    23,
     0,   113,     0,   122,    52,   113,     0,     0,    76,   195,
    77,     0,   127,     0,   128,     0,     0,   126,    44,   134,
    22,   125,   135,     0,     0,   127,    51,     0,   124,     1,
    51,     0,   128,    24,     0,   126,   146,    54,   108,     0,
   126,     0,   128,   147,     0,   128,    25,     3,   130,   131,
   132,    51,   129,     0,     0,     3,    51,     0,     0,    74,
   153,    75,     0,     0,   119,     0,   133,     0,   133,     3,
     0,     0,   133,     3,   196,     0,   113,     0,     3,    54,
   113,     0,   136,     0,   136,    51,     0,   137,     0,   136,
    51,   137,     0,     0,   199,    54,    76,   138,   124,    77,
     0,   146,    54,   108,    56,   140,    51,     0,   146,    54,
     1,    51,     0,   196,     0,    76,   141,    77,     0,    76,
   142,    77,     0,   140,     0,   141,    52,   140,     0,   143,
     0,   144,     0,   144,    51,     0,   145,     0,   143,   145,
     0,     3,    54,   140,     0,     3,     0,   146,    52,     3,
     0,   148,    17,   150,   152,   149,    51,   151,     0,     0,
    23,     0,     0,   119,     0,     3,     0,     3,    78,     3,
     0,     0,   151,     3,    51,     0,   151,     3,   196,    51,
     0,     0,    76,    77,     0,    76,   153,    77,     0,   154,
     0,   153,    51,   154,     0,   156,   146,   157,   155,     0,
     0,    56,   140,     0,     0,    15,     0,    14,     0,     0,
   119,     0,    54,    21,    22,   194,     0,    54,    21,    22,
    14,     0,    30,     0,     1,    30,     0,   162,     0,   159,
    51,   162,     0,     0,   159,     1,    51,   160,   162,     0,
     4,    54,     0,     3,    54,     0,     0,     0,   161,   163,
   162,     0,     0,    29,   164,   159,   158,     0,   172,     0,
    33,   196,     0,     0,   173,    47,   165,   159,   158,     0,
   173,    48,   175,    30,     0,    32,   196,     0,    50,     0,
   194,     0,   194,    53,   196,     0,   192,     0,     0,   192,
    36,   166,   162,     0,     0,    45,   198,    40,   167,   162,
     0,     0,    44,   196,    22,   168,   185,    30,     0,     0,
    37,   194,    53,   196,   184,   196,    40,   169,   162,     0,
     0,    41,   196,    40,   170,   162,     0,     0,    42,   171,
   159,    43,   196,     0,    31,     0,    31,   196,     0,     0,
    46,   174,   159,     0,     0,   176,   159,     0,   177,     0,
   178,     0,   178,   182,     0,   182,     0,   179,     0,   178,
   179,     0,   177,    51,     0,   177,     1,    51,     0,     0,
    49,     3,    54,   194,    40,   180,   162,     0,     0,    49,
   194,    40,   181,   162,     0,     0,    36,   183,   159,     0,
    38,     0,    39,     0,   188,     0,   187,     0,     0,   187,
   191,   186,   159,     0,     0,   188,    51,     0,     0,   187,
   190,   189,   162,     0,   199,    54,     0,     1,    54,     0,
    36,     0,     1,    36,     0,     0,    34,   196,    35,   193,
   162,     0,     3,     0,    50,     3,     0,   194,    76,   198,
    77,     0,   194,    74,   198,    75,     0,   194,    78,     3,
     0,    73,   194,     0,   194,    58,     0,    76,   196,    77,
     0,   194,     0,   195,    52,   194,     0,   197,     0,   196,
    56,   196,     0,   196,    55,   196,     0,   194,    60,   194,
     0,   196,    59,   196,     0,   194,     0,     4,     0,    74,
    75,     0,    74,   199,    75,     0,   197,    61,   197,     0,
   197,    62,   197,     0,   197,    65,   197,     0,   197,    66,
   197,     0,   197,    68,   197,     0,   197,    67,   197,     0,
   197,    70,   197,     0,    62,   197,     0,    61,   197,     0,
   197,    69,   197,     0,   197,    63,   197,     0,   197,    64,
   197,     0,    72,   197,     0,   194,    71,   194,     0,     0,
   196,     0,   198,    52,   196,     0,   200,     0,   199,    52,
   200,     0,   196,     0,   196,    57,   196,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   167,   181,   194,   200,   217,   232,   237,   245,   247,   252,
   254,   263,   271,   273,   282,   291,   293,   297,   303,   305,
   307,   321,   335,   337,   338,   345,   347,   348,   349,   354,
   390,   407,   413,   414,   422,   431,   439,   447,   448,   454,
   462,   467,   473,   478,   484,   485,   490,   495,   506,   521,
   522,   527,   532,   537,   537,   543,   548,   554,   556,   557,
   579,   581,   592,   600,   608,   616,   627,   638,   650,   650,
   651,   657,   662,   667,   676,   683,   692,   704,   719,   735,
   743,   748,   755,   759,   774,   802,   827,   832,   837,   842,
   848,   853,   859,   871,   885,   890,   895,   897,   898,   907,
   913,   915,   916,   920,   928,   935,   937,   942,   958,   963,
   965,   970,   984,   989,   994,   996,  1001,  1006,  1011,  1013,
  1019,  1021,  1023,  1025,  1027,  1036,  1044,  1052,  1057,  1059,
  1063,  1087,  1089,  1094,  1096,  1098,  1101,  1106,  1111,  1118,
  1123,  1129,  1206,  1211,  1216,  1221,  1226,  1231,  1238,  1244,
  1286,  1292,  1297,  1301,  1306,  1308,  1313,  1337,  1342,  1347,
  1352,  1356,  1361,  1367,  1373,  1378,  1385,  1387,  1392,  1394,
  1395,  1400,  1401,  1403,  1405,  1411,  1418,  1418,  1427,  1434,
  1440,  1446,  1457,  1463,  1467,  1472,  1478,  1492,  1498,  1499,
  1507,  1510,  1519,  1522,  1532,  1538,  1561,  1570,  1578,  1581,
  1591,  1600,  1602,  1604,  1615,  1621,  1630,  1635,  1636,  1637,
  1638,  1640,  1642,  1644,  1646,  1648,  1658,  1663,  1672,  1678,
  1688,  1694,  1699,  1704,  1706,  1707,  1714,  1718,  1720,  1722,
  1738,  1744,  1746,  1752,  1754,  1759,  1768,  1774,  1786,  1792,
  1815,  1829,  1844,  1849,  1854,  1860,  1865,  1870,  1872,  1878,
  1884,  1890,  1897,  1908,  1912,  1917,  1922,  1928,  1934,  1940,
  1946,  1952,  1958,  1964,  1970,  1976,  1984,  1992,  1998,  2004,
  2011,  2016,  2020,  2025,  2030,  2035,  2037
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"CONSTANT","UNIT","PROGRAM","USES","INTERFACE","IMPLEMENTATION","INITIALIZATION",
"FINALIZATION","LABEL","TYPE","CONST","VAR","ABSOLUTE","FUNCTION","PACKED","FILE",
"SET","ARRAY","OF","FIELDED","VISIBILITY","PROPERTY","STRING","EXTERNAL","FORWARD",
"c_str","END","ASMSTMT","GOTO","RAISE","IF","THEN","ELSE","FOR","TO","DOWNTO",
"DO","WHILE","REPEAT","UNTIL","CASE","WITH","TRY","FINALLY","EXCEPT","ON","INHERITED",
"';'","','","'='","':'","COMPARE","EQ","TWOFULLSTOP","'^'","IN","IS","'+'","'-'",
"OR","XOR","'*'","'/'","MOD","DIV","AND","SHIFT","AS","NOT","'@'","'['","']'",
"'('","')'","'.'","pascalcode","@1","@2","@3","@4","@5","programhead","initialization",
"@6","finalization","@7","uses","@8","unitlist","unitreq","intfdescrlist","impldescrlist",
"funcdef","@9","funcbody","@10","commondescr","labelsctn","constsctn","varsctn",
"typesctn","@11","importlist","typedef","typedescr","@12","@13","@14","@15",
"smptypedescr","mpacktypedescr","@16","@17","@18","@19","singlenametype","enumconstlist",
"objspec","arridxdescrlist","dependency","memberlist","@20","fieldlist_rich",
"fieldlist_poor","memberlist_rich","defaultspec","indexes","proptype","propspec",
"propspec_paired","rcopart","rcaselist","rcaselist_poor","rcasegroup","@21",
"typedinit","initializer","initializerlist","initlist","initlist_rich","initlist_poor",
"smallinit","identifierlist","funchead","classword","funcrtype","funcname","funcspecs",
"paramdef","formalparamslist","formalparams","mayinitializer","varconstspec",
"formalparamstype","end","stmtlist","@22","labelmark","stmt","@23","@24","@25",
"@26","@27","@28","@29","@30","@31","asmstmt","tryhead","@32","exceptlist","@33",
"onexceptlist_poor","onexceptlist_rich","onexcept","@34","@35","onelse","@36",
"direction","casegrouplist","@37","listcaselist_rich","listcaselist_poor","@38",
"listcasehead","elsecasehead","ifthen","@39","primary","primarylist","expr",
"expr_neq","exprlist","rangelist","range", NULL
};
#endif

static const short yyr1[] = {     0,
    80,    81,    79,    82,    83,    84,    79,    85,    85,    86,
    87,    86,    88,    89,    88,    90,    91,    90,    92,    92,
    93,    93,    94,    94,    94,    95,    95,    95,    95,    97,
    96,    99,    98,    98,   100,   100,   100,   100,   100,   100,
   101,   101,   102,   102,   102,   102,   103,   103,   103,   103,
   103,   104,   105,   104,   104,   106,   106,   107,   107,   107,
   108,   108,   108,   108,   108,   108,   108,   109,   108,   108,
   110,   108,   111,   108,   112,   108,   113,   113,   113,   115,
   114,   116,   117,   114,   118,   114,   119,   119,   120,   120,
   121,   121,   122,   122,   123,   123,   124,   124,   125,   124,
   126,   126,   126,   126,   127,   128,   128,   128,   129,   129,
   130,   130,   131,   131,   132,   132,   133,   133,   134,   134,
   135,   135,   136,   136,   138,   137,   139,   139,   140,   140,
   140,   141,   141,   142,   142,   143,   144,   144,   145,   146,
   146,   147,   148,   148,   149,   149,   150,   150,   151,   151,
   151,   152,   152,   152,   153,   153,   154,   155,   155,   156,
   156,   156,   157,   157,   157,   157,   158,   158,   159,   159,
   160,   159,   161,   161,   162,   163,   162,   164,   162,   162,
   162,   165,   162,   162,   162,   162,   162,   162,   162,   166,
   162,   167,   162,   168,   162,   169,   162,   170,   162,   171,
   162,   172,   172,   174,   173,   176,   175,   175,   175,   175,
   175,   177,   177,   178,   178,   180,   179,   181,   179,   183,
   182,   184,   184,   185,   185,   186,   185,   187,   187,   189,
   188,   190,   190,   191,   191,   193,   192,   194,   194,   194,
   194,   194,   194,   194,   194,   195,   195,   196,   196,   196,
   196,   196,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   198,   198,   198,   199,   199,   200,   200
};

static const short yyr2[] = {     0,
     0,     0,     8,     0,     0,     0,    16,     0,     3,     0,
     0,     3,     0,     0,     3,     0,     0,     4,     1,     3,
     1,     3,     0,     2,     2,     0,     2,     2,     3,     0,
     5,     0,     4,     1,     1,     1,     1,     1,     3,     5,
     3,     3,     1,     5,     2,     3,     1,     5,     7,     2,
     3,     1,     0,     5,     3,     0,     3,     2,     3,     3,
     1,     1,     4,     2,     2,     3,     1,     0,     4,     1,
     0,     3,     0,     5,     0,     4,     1,     3,     3,     0,
     4,     0,     0,     8,     0,     5,     2,     2,     3,     3,
     0,     2,     1,     3,     0,     3,     1,     1,     0,     6,
     0,     2,     3,     2,     4,     1,     2,     8,     0,     2,
     0,     3,     0,     1,     1,     2,     0,     3,     1,     3,
     1,     2,     1,     3,     0,     6,     6,     4,     1,     3,
     3,     1,     3,     1,     1,     2,     1,     2,     3,     1,
     3,     7,     0,     1,     0,     1,     1,     3,     0,     3,
     4,     0,     2,     3,     1,     3,     4,     0,     2,     0,
     1,     1,     0,     1,     4,     4,     1,     2,     1,     3,
     0,     5,     2,     2,     0,     0,     3,     0,     4,     1,
     2,     0,     5,     4,     2,     1,     1,     3,     1,     0,
     4,     0,     5,     0,     6,     0,     9,     0,     5,     0,
     5,     1,     2,     0,     3,     0,     2,     1,     1,     2,
     1,     1,     2,     2,     3,     0,     7,     0,     5,     0,
     3,     1,     1,     1,     1,     0,     4,     0,     2,     0,
     4,     2,     2,     1,     2,     0,     5,     1,     2,     4,
     4,     3,     2,     2,     3,     1,     3,     1,     3,     3,
     3,     3,     1,     1,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     3,     3,     3,     2,     3,
     0,     1,     3,     1,     3,     1,     3
};

static const short yydefact[] = {     8,
     0,     0,     1,     0,     0,    26,     4,     9,     0,     0,
     0,     0,    52,    43,    47,   144,     2,    28,    27,    38,
     0,     0,     0,    30,     0,    16,    29,     0,   238,   254,
     0,     0,     0,     0,     0,     0,     0,   253,   272,   248,
     0,   175,     0,   140,    45,     0,     0,   140,    50,     0,
     0,     0,     0,     0,    26,     0,    17,    23,    42,   239,
   253,   265,   264,   269,   243,   255,   276,     0,   274,     0,
   244,     0,     0,   271,   271,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
     0,   238,     0,   178,   202,     0,     0,     0,     0,     0,
   200,     0,   271,   204,   186,     0,   176,   169,   180,     0,
   189,   187,    46,     0,     0,     0,    51,     0,    55,    53,
    56,    39,     0,   147,   152,     0,   143,     0,     0,   256,
   245,   251,   270,     0,     0,   242,   250,   249,   252,   257,
   258,   267,   268,   259,   260,   262,   261,   266,   263,   273,
   174,   173,   175,   203,   185,   181,     0,     0,     0,   175,
     0,     0,   175,     0,   167,   175,     0,   175,   182,   206,
   190,     0,     0,   141,     0,    73,    71,    67,     0,     0,
    95,    62,     0,     0,     0,    61,    70,   253,     0,     0,
     0,     0,    32,     0,    34,     0,   160,   145,    21,     0,
    19,     5,    24,    25,   277,   275,   241,   240,     0,   236,
     0,   198,     0,   194,   192,     0,   168,   171,   170,     3,
   177,   175,   220,     0,     0,   175,     0,   209,   212,   211,
   175,   188,    44,   128,   152,     0,    68,    75,    80,    82,
     0,     0,    85,     0,    64,    65,   238,     0,     0,     0,
     0,    48,     0,    95,    54,     0,     0,    40,   175,    31,
   148,   162,   161,   153,     0,   155,     0,     0,   146,     0,
     0,    18,     0,    16,   179,   175,     0,   175,     0,     0,
   228,   175,   175,     0,   175,   238,     0,   184,     0,     0,
   214,   213,   210,   191,   145,    95,    72,     0,     0,     0,
     0,    66,   246,     0,   101,     0,     0,     0,    78,     0,
     0,   129,    79,     0,     0,    85,    58,    57,     0,   160,
   154,   163,    88,    87,   149,    22,    20,     6,   237,   222,
   223,     0,   199,   201,     0,     0,   224,   193,   172,   183,
     0,     0,   218,   215,    91,    69,    76,    81,    93,     0,
     0,    96,     0,   106,    97,    98,    63,    89,    90,   238,
   132,     0,     0,   134,   135,   137,   129,   127,    49,    59,
    60,    33,   156,     0,   164,   158,   142,    26,     0,   195,
     0,   234,   230,   226,     0,   229,     0,   175,     0,    74,
     0,    83,   247,     0,    86,     0,     0,   102,   104,     0,
   107,     0,     0,   130,   131,     0,   138,   136,     0,     0,
   157,     0,     0,   196,   235,   233,   175,   175,   232,   216,
   219,    92,    94,     0,   103,   238,   119,     0,     0,   111,
   139,   133,     0,   159,   150,     0,    11,    13,   175,   231,
     0,   175,     0,     0,    99,   105,   160,   113,   166,   165,
   151,   175,    14,     0,   197,   217,    84,   120,     0,     0,
   114,   117,     0,   175,     0,   100,   121,   123,     0,   112,
     0,   115,     0,     7,   122,     0,   109,   116,   124,   125,
     0,   108,   118,   101,   110,     0,   126,     0,     0,     0
};

static const short yydefgoto[] = {   488,
     6,    42,    10,   274,   378,     3,   438,   452,   454,   464,
    58,   126,   200,   201,   127,     9,    18,    55,   194,   259,
    19,    20,    21,    22,    23,   191,   192,   255,   185,   298,
   236,   235,   299,   186,   187,   300,   301,   424,   305,   269,
   248,   390,   350,   243,   353,   459,   354,   355,   356,   482,
   448,   462,   471,   472,   428,   466,   467,   468,   484,    45,
   311,   362,   363,   364,   365,   366,    46,    24,    25,   270,
   125,   377,   198,   265,   266,   411,   267,   376,   167,   106,
   283,   107,   108,   168,   153,   222,   231,   282,   281,   439,
   278,   160,   109,   110,   163,   225,   226,   227,   228,   229,
   442,   388,   230,   285,   332,   335,   418,   336,   337,   417,
   383,   384,   111,   276,    38,   304,    67,    40,    41,   469,
    69
};

static const short yypact[] = {   235,
    21,    29,-32768,   -38,   -16,-32768,-32768,-32768,   746,    68,
    41,   459,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   673,   696,   719,   252,   103,   146,-32768,    75,-32768,-32768,
   134,   115,   115,   115,   109,    49,   115,   706,   535,   747,
   298,     5,   107,   105,-32768,   199,   117,-32768,-32768,   250,
   154,   166,   115,   176,-32768,   247,-32768,-32768,-32768,-32768,
   509,-32768,-32768,-32768,   266,-32768,   622,    89,-32768,   222,
-32768,   109,   109,   115,   115,   264,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,-32768,
   115,   219,   243,-32768,   115,   115,   115,   115,   109,   115,
-32768,   115,   115,-32768,   134,    43,-32768,-32768,-32768,   331,
   300,   323,-32768,   115,   330,   467,-32768,   467,-32768,-32768,
   535,-32768,   739,   265,   281,   365,   774,   115,   115,-32768,
-32768,   309,   309,   119,   -19,-32768,-32768,-32768,-32768,   564,
   564,   564,   564,-32768,-32768,-32768,-32768,-32768,-32768,   535,
-32768,-32768,     5,   535,   535,   535,   368,   335,   362,     5,
   216,   184,     5,    -8,-32768,     5,   304,     5,-32768,    -9,
-32768,   115,   375,-32768,   324,-32768,-32768,   367,   370,    -2,
    -6,   338,   130,   297,   348,-32768,-32768,   364,   737,   179,
   534,    23,-32768,   378,-32768,   416,     3,   402,   398,   381,
-32768,-32768,-32768,   252,   535,-32768,-32768,-32768,    43,-32768,
   115,-32768,   169,-32768,-32768,     9,-32768,-32768,-32768,-32768,
-32768,     5,-32768,   125,   431,     5,   112,    -9,-32768,-32768,
     5,   535,-32768,-32768,   281,   288,-32768,-32768,-32768,-32768,
   461,   109,-32768,   115,-32768,   309,   415,    37,   334,   115,
   109,-32768,   594,    -6,-32768,   418,   115,-32768,     5,-32768,
-32768,-32768,-32768,-32768,   -23,-32768,   469,   193,-32768,   428,
   478,-32768,   365,   146,-32768,     5,   439,     5,   432,   115,
-32768,     5,     5,    43,     5,   437,   212,-32768,   139,   438,
-32768,-32768,-32768,-32768,   402,   423,-32768,   594,   566,   594,
   566,-32768,   309,    54,-32768,   489,   497,   505,-32768,   574,
   472,   535,   747,   277,   473,   475,-32768,   535,    43,   429,
-32768,   273,-32768,   309,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   115,-32768,   535,   504,   500,   491,-32768,-32768,-32768,
   153,   109,-32768,-32768,   524,-32768,-32768,-32768,-32768,   158,
   109,-32768,    99,    20,   498,   259,-32768,-32768,-32768,   502,
-32768,   162,   481,   556,   512,-32768,   222,-32768,-32768,-32768,
-32768,-32768,-32768,   152,-32768,   519,   562,-32768,   457,-32768,
    39,-32768,-32768,-32768,   278,-32768,   234,     5,   545,-32768,
   566,-32768,   309,   528,-32768,   599,   302,-32768,-32768,   578,
-32768,   334,   334,-32768,-32768,   502,-32768,-32768,   560,   334,
-32768,   245,   435,-32768,-32768,-32768,     5,     5,-32768,-32768,
-32768,-32768,-32768,   567,-32768,   532,-32768,   571,   594,   514,
-32768,-32768,   124,-32768,-32768,   463,-32768,   588,     5,-32768,
   191,     5,   594,   566,-32768,-32768,   429,   402,-32768,   309,
-32768,     5,-32768,   570,-32768,-32768,-32768,-32768,   115,   -30,
-32768,-32768,    18,     5,   523,-32768,   554,-32768,   401,-32768,
   558,   618,   214,-32768,   115,   546,   620,   115,-32768,-32768,
   575,-32768,   535,-32768,-32768,    10,-32768,   625,   637,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   369,-32768,-32768,   372,-32768,   -54,-32768,-32768,-32768,-32768,
   526,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -114,-32768,
-32768,-32768,-32768,  -287,   405,-32768,-32768,-32768,-32768,  -316,
-32768,-32768,-32768,   397,   170,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   182,-32768,   636,
  -295,-32768,-32768,-32768,-32768,   295,   -20,  -122,-32768,   374,
-32768,-32768,   427,   217,   343,-32768,-32768,-32768,  -202,   -92,
-32768,-32768,   -65,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   542,-32768,-32768,-32768,-32768,-32768,-32768,   452,
-32768,-32768,   464,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    63,-32768,   -12,   175,   -44,   -33,
   565
};


#define	YYLAST		817


static const short yytable[] = {    39,
   123,    50,    68,   190,   204,   375,   275,    92,    93,   279,
   394,   347,     7,   349,   361,   241,   262,   263,   279,   239,
   320,   217,    48,     4,    70,   257,   223,   320,   -12,   134,
   135,     5,    91,    94,     8,    95,    96,    97,    98,   224,
   121,    99,   218,   164,   470,   100,   101,   -12,   102,   103,
   104,    29,    30,   321,   105,  -205,  -205,   208,   162,   166,
   209,    39,    39,   396,   137,   138,   139,   213,   166,   242,
   216,   240,   165,   258,   415,    26,   256,    35,   150,   264,
    37,   340,   154,   155,   156,   157,   487,   159,   308,   161,
    39,    27,   416,   166,    61,    61,    61,    65,    31,   394,
   219,   173,   221,   423,   112,   351,   431,   432,   427,    32,
    33,    29,   290,   309,   434,   205,   372,    29,    30,    56,
    34,    35,    36,    66,    37,    59,    29,   286,   395,   284,
   352,   461,    29,   289,   132,   133,    60,   449,   315,   279,
   129,  -208,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    57,   279,    29,   245,   458,   113,    31,   232,
   114,   158,   291,   130,    31,   294,   319,   117,  -207,   279,
    91,    70,   409,    31,    31,    32,    33,   323,   188,    31,
   188,    35,  -221,   346,    37,   348,    34,    35,    36,   166,
    37,   279,   341,   207,   251,    29,    35,    35,   277,    37,
    37,    31,    35,   166,   119,    37,    62,    63,    64,   391,
   329,   280,   333,   403,   279,   112,   338,   339,   323,   166,
  -227,   120,   112,   215,    35,   112,   122,    37,   112,   252,
   112,   306,   392,   401,   249,    91,   312,   214,   404,     1,
     2,   166,    31,   -15,   318,   246,   322,    29,    30,   124,
   115,   343,   116,   188,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   166,    35,   136,   334,    37,    71,
    77,    78,   151,   420,    79,  -143,    77,    78,    53,    54,
    79,    16,   399,   400,   112,    74,   287,    75,   112,    76,
   189,    71,   189,   112,    31,   435,   152,   367,   131,   247,
    30,   115,   385,   118,   303,    32,    33,    74,   180,    75,
   296,    76,    61,   314,   446,   188,    34,    35,    36,   379,
    37,   112,   421,   413,   115,   441,   374,   369,   457,   129,
   324,   419,   174,   397,    71,   171,    29,    30,   112,    74,
   112,    75,   196,    76,   112,   112,    31,   112,    90,    91,
    74,   440,    75,   115,    76,   429,   197,    32,    33,   463,
   188,   188,   188,   188,   -77,   189,    71,   199,    34,    35,
    36,   473,    37,   455,   234,   172,   456,   169,   170,   -77,
    71,   220,    74,    31,    75,   -77,    76,   211,   237,   312,
   312,   238,    71,   -77,    32,    33,    74,   312,    75,   436,
    76,   212,   210,   249,   387,    34,    35,    36,    74,   310,
    75,   244,    76,   393,   -77,   -77,    77,    78,   261,   -77,
    79,    71,    77,    78,   313,   233,    79,   189,   260,    77,
    78,   272,   273,    79,    73,    11,   324,    74,   -77,    75,
   -77,    76,   262,   263,   437,   -10,    12,    13,    14,    15,
   112,  -143,   129,   188,   476,   268,   271,    16,   188,    28,
   288,    29,    30,   302,   -10,   483,   307,   175,   317,    29,
    30,    48,   189,   189,   189,   189,   330,   331,   325,   112,
   112,   326,   218,   176,   177,   178,   179,   180,   344,   181,
   342,   188,   182,    77,    78,   450,   414,    79,   242,   358,
   381,   112,    29,    30,   112,   188,   188,   359,    31,  -271,
  -271,    77,    78,   451,   112,    79,    31,    77,    78,    32,
    33,    79,   368,   370,   183,   371,   112,    32,    33,  -225,
    34,    35,    36,   380,    37,   382,    29,    30,    34,    35,
    36,   386,   184,    77,    78,   389,   253,    79,   398,    31,
   176,   177,   178,   179,   180,   402,   254,   405,   406,   182,
    32,    33,   408,   357,   412,   189,    71,   422,    29,    30,
   189,    34,    35,    36,   410,    37,   360,    30,   425,    73,
   430,   433,    74,    31,    75,   444,    76,   447,   443,    77,
    78,   183,   445,    79,    32,    33,    29,    30,   453,   465,
   474,   426,    30,   189,   475,    34,    35,    36,   477,   184,
   176,   177,   178,   179,   180,    31,   181,   189,   189,   182,
   478,   480,   481,    31,   489,   485,    32,    33,    84,    85,
    86,    87,    88,    89,    32,    33,   490,    34,    35,    36,
   297,   184,   328,    31,   327,    34,    35,    36,    31,   310,
   316,   183,   203,   486,    32,    33,   479,    49,   407,    32,
    33,   295,   373,   460,   195,    34,    35,    36,   345,   184,
    34,    35,    36,    43,   184,    44,    77,    78,   128,   292,
    79,   -36,   -36,   -36,   -36,   -36,   -36,   -36,     0,   -36,
     0,   293,     0,   206,     0,   -36,    47,     0,    48,     0,
     0,   -36,   -36,   -36,   -37,   -37,   -37,   -37,   -37,   -37,
   -37,     0,   -37,     0,     0,     0,     0,     0,   -37,    51,
     0,    52,     0,     0,   -37,   -37,   -37,   -35,   -35,   -35,
   -35,   -35,   -35,   -35,     0,   -35,     0,     0,     0,    11,
     0,   -35,     0,     0,     0,     0,    11,   -35,   -35,   -35,
    12,    13,    14,    15,     0,  -143,     0,    12,    13,    14,
    15,    16,  -143,    71,     0,    72,     0,   193,    16,    95,
     0,     0,     0,     0,    17,     0,    73,     0,     0,    74,
     0,    75,   202,    76,     0,    12,    13,    14,    15,     0,
     0,     0,     0,   250,     0,     0,    16,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89
};

static const short yycheck[] = {    12,
    55,    22,    36,   118,   127,   322,   209,     3,     4,     1,
     1,   299,    51,   301,   310,    22,    14,    15,     1,    22,
    51,    30,     3,     3,    37,     3,    36,    51,    11,    74,
    75,     3,    52,    29,    51,    31,    32,    33,    34,    49,
    53,    37,    51,     1,    75,    41,    42,    30,    44,    45,
    46,     3,     4,    77,    50,    47,    48,    77,   103,    51,
   153,    74,    75,    44,    77,    78,    79,   160,    51,    76,
   163,    74,    30,    51,    36,     8,   191,    73,    91,    77,
    76,   284,    95,    96,    97,    98,    77,   100,    52,   102,
   103,    51,    54,    51,    32,    33,    34,    35,    50,     1,
   166,   114,   168,   391,    42,    52,   402,   403,   396,    61,
    62,     3,     1,    77,   410,   128,   319,     3,     4,    17,
    72,    73,    74,    75,    76,    51,     3,     3,    30,   222,
    77,   448,     3,   226,    72,    73,     3,    14,   253,     1,
    52,    30,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,     7,     1,     3,    26,   444,    51,    50,   172,
    56,    99,    51,    75,    50,   231,   259,    51,    30,     1,
    52,   184,    21,    50,    50,    61,    62,    26,   116,    50,
   118,    73,    30,   298,    76,   300,    72,    73,    74,    51,
    76,     1,   285,    75,    16,     3,    73,    73,   211,    76,
    76,    50,    73,    51,    51,    76,    32,    33,    34,    52,
   276,    43,   278,    52,     1,   153,   282,   283,    26,    51,
    30,    56,   160,    40,    73,   163,    51,    76,   166,    51,
   168,   244,    75,   356,    56,    52,   249,    22,    77,     5,
     6,    51,    50,    30,   257,   183,   267,     3,     4,     3,
    52,    40,    54,   191,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    51,    73,     3,   280,    76,    58,
    55,    56,    54,    40,    59,    17,    55,    56,    27,    28,
    59,    23,    24,    25,   222,    74,   224,    76,   226,    78,
   116,    58,   118,   231,    50,    51,    54,   310,    77,     3,
     4,    52,   336,    54,   242,    61,    62,    74,    21,    76,
    23,    78,   250,   251,   429,   253,    72,    73,    74,   332,
    76,   259,   388,   378,    52,   418,    54,    51,   443,    52,
   268,    54,     3,   354,    58,    36,     3,     4,   276,    74,
   278,    76,    78,    78,   282,   283,    50,   285,    51,    52,
    74,   417,    76,    52,    78,    54,    76,    61,    62,   452,
   298,   299,   300,   301,     1,   191,    58,     3,    72,    73,
    74,   464,    76,   439,    51,    53,   442,    47,    48,    16,
    58,    78,    74,    50,    76,    22,    78,    53,    22,   402,
   403,    22,    58,    30,    61,    62,    74,   410,    76,   412,
    78,    40,    35,    56,   342,    72,    73,    74,    74,    76,
    76,    74,    78,   351,    51,    52,    55,    56,     3,    56,
    59,    58,    55,    56,   250,    51,    59,   253,    51,    55,
    56,    51,    52,    59,    71,     1,   374,    74,    75,    76,
    77,    78,    14,    15,    10,    11,    12,    13,    14,    15,
   388,    17,    52,   391,    54,    54,    59,    23,   396,     1,
    30,     3,     4,     3,    30,   478,    52,     1,    51,     3,
     4,     3,   298,   299,   300,   301,    38,    39,    51,   417,
   418,     4,    51,    17,    18,    19,    20,    21,    51,    23,
    54,   429,    26,    55,    56,   433,    40,    59,    76,     3,
     1,   439,     3,     4,   442,   443,   444,     3,    50,    51,
    52,    55,    56,    51,   452,    59,    50,    55,    56,    61,
    62,    59,    51,    51,    58,    51,   464,    61,    62,    30,
    72,    73,    74,    30,    76,    36,     3,     4,    72,    73,
    74,    51,    76,    55,    56,    22,    13,    59,    51,    50,
    17,    18,    19,    20,    21,    54,    23,    77,     3,    26,
    61,    62,    51,    75,     3,   391,    58,    23,     3,     4,
   396,    72,    73,    74,    56,    76,     3,     4,    51,    71,
     3,    22,    74,    50,    76,    54,    78,    74,    22,    55,
    56,    58,    22,    59,    61,    62,     3,     4,    11,    30,
    78,     3,     4,   429,    51,    72,    73,    74,    51,    76,
    17,    18,    19,    20,    21,    50,    23,   443,   444,    26,
     3,    76,     3,    50,     0,    51,    61,    62,    65,    66,
    67,    68,    69,    70,    61,    62,     0,    72,    73,    74,
   236,    76,   274,    50,   273,    72,    73,    74,    50,    76,
   254,    58,   127,   484,    61,    62,   475,    22,   364,    61,
    62,   235,   320,   447,   123,    72,    73,    74,   295,    76,
    72,    73,    74,     1,    76,     3,    55,    56,    57,   228,
    59,     9,    10,    11,    12,    13,    14,    15,    -1,    17,
    -1,   228,    -1,   129,    -1,    23,     1,    -1,     3,    -1,
    -1,    29,    30,    31,     9,    10,    11,    12,    13,    14,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,     1,
    -1,     3,    -1,    -1,    29,    30,    31,     9,    10,    11,
    12,    13,    14,    15,    -1,    17,    -1,    -1,    -1,     1,
    -1,    23,    -1,    -1,    -1,    -1,     1,    29,    30,    31,
    12,    13,    14,    15,    -1,    17,    -1,    12,    13,    14,
    15,    23,    17,    58,    -1,    60,    -1,    29,    23,    31,
    -1,    -1,    -1,    -1,    29,    -1,    71,    -1,    -1,    74,
    -1,    76,     9,    78,    -1,    12,    13,    14,    15,    -1,
    -1,    -1,    -1,    57,    -1,    -1,    23,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{
      open_output();
      write_cpp(DIVISOR_LINE);
      if (use_vcl)
        write_cpp("\n\n#include <vcl.h>\n#pragma hdrstop\n");
      if (use_starray)
      {
        write_cpp("\n#include <dstarray.h>\n");
        write_cpp(DIVISOR_LINE);
      }
    ;
    break;}
case 2:
{
      indent = 0;
      newline();
      write_cpp(create_winmain ?
        "WINAPI WinMain(HANDLE, HANDLE,	LPSTR lpszCommandLine, int cmdShow)\n{"
        : "#pragma argsused\nint main(int argc, char* argv[])\n{");

      indent = 1;
      wrk_func_name = "@";
      use_srcunit;
    ;
    break;}
case 3:
{
      newline();
      write_cpp("return 0;\n}");
      YYACCEPT;
    ;
    break;}
case 4:
{
      src_name = yyvsp[-1].code;
      open_output(false);

      write_cpp(DIVISOR_LINE);
      write_cpp("\n#ifndef %sH\n#define %sH\n", src_name.c_str(), src_name.c_str());
      write_cpp(DIVISOR_LINE);
      if (use_starray)
      {
        write_cpp("\n#include <dstarray.h>\n");
        write_cpp(DIVISOR_LINE);
      }
      in_intf = true;
      use_srcunit;
    ;
    break;}
case 5:
{
      indent = 0;
      newline();
      write_cpp("#endif");
      in_intf = false;

      open_output(true);
      write_cpp(DIVISOR_LINE);
      if (use_vcl)
        write_cpp("\n\n#include <vcl.h>\n#pragma hdrstop\n");
    ;
    break;}
case 6:
{
      if (!vars.empty())
        write_cpp("%s", vars.c_str());
    ;
    break;}
case 7:
{
      YYACCEPT;
    ;
    break;}
case 8:
{;
    break;}
case 9:
{
      src_name = yyvsp[-1].code;
    ;
    break;}
case 10:
{ ;
    break;}
case 11:
{
      write_cpp("\n#pragma startup %s_initialization\n"
        "static void %s_initialization(void)\n{",
        src_name.c_str(), src_name.c_str());
      indent = 1;
      wrk_func_name = "@";
    ;
    break;}
case 12:
{
      indent = 0;
      newline();
      write_cpp("}\n");
      write_cpp(DIVISOR_LINE);
      wrk_func_name.clear();
    ;
    break;}
case 13:
{ ;
    break;}
case 14:
{
      write_cpp("\n#pragma exit %s_finalization\n"
        "static void %s_finalization(void)\n{",
        src_name.c_str(), src_name.c_str());
      indent = 1;
      wrk_func_name = "@";
    ;
    break;}
case 15:
{
      indent = 0;
      newline();
      write_cpp("}\n");
      write_cpp(DIVISOR_LINE);
      wrk_func_name.clear();
    ;
    break;}
case 16:
{ ;
    break;}
case 17:
{
      section = USES;
    ;
    break;}
case 18:
{
      write_cpp("\n");
      write_cpp(DIVISOR_LINE);
    ;
    break;}
case 21:
{
      newline();
      units.push_back(yyvsp[0].code);
      for (slst_p = hpps.c_str(); slst_p != hpps.end(); slst_p++)
        if (stricmp(slst_p->c_str(), yyvsp[0].code.c_str()) == 0)
        {
          write_cpp("#include <%s.hpp>", yyvsp[0].code.c_str());
          goto hpp_add;
        }
      write_cpp("#include \"%s.h\"", yyvsp[0].code.c_str());
      hpp_add:
    ;
    break;}
case 22:
{
      newline();
      units.push_back(yyvsp[-2].code);
      if (yyvsp[0].code.length() > 4 && stricmp(&yyvsp[0].code.end()[4], ".pas"))
      {
        yyvsp[0].code.end()[-3] = 'h';
        yyvsp[0].code.end()[-2] = '\"';
        yyvsp[0].code.end()[-1] = '\0';
      }
      write_cpp("#include %s", yyvsp[0].code.c_str());
    ;
    break;}
case 23:
{ ;
    break;}
case 25:
{
      newline();
      write_cpp("%s;", yyvsp[0].code.c_str());
      class_name.clear();
    ;
    break;}
case 26:
{ ;
    break;}
case 29:
{
      POST_ERROR;
    ;
    break;}
case 30:
{
      wrk_func_name = func_name;
      indent = 0;
      newline();
      write_cpp("%s\n{", yyvsp[0].code.c_str());
      indent = 1;
      if (func_rtype != "void")
      {
        newline();
        write_cpp("%s Result;", func_rtype);
      }
      wrk_func_params.clear();
      if (yyvsp[0].code.end()[-1] == ')' && strcmp(&yyvsp[0].code.end()[-6], "(void)"))
      {
        p = &yyvsp[0].code.end()[-1];
        for (;;)
        {
          *p = '\0';
          do
            p--;
          while (isdigit(*p) || isalpha(*p) || *p == '_');
          wrk_func_params = string(p + 1) + ", " + wrk_func_params;
          while (*p != ',')
          {
            p--;
            if (*p == '(')
              goto ready;
          }
        }
        ready:
        wrk_func_params.resize(wrk_func_params.length() - 2);
      }
    ;
    break;}
case 31:
{
      indent = 1;
      if (func_rtype != "void")
      {
        newline();
        write_cpp("return Result;");
      }
      indent = 0;
      newline();
      write_cpp("}\n");
      write_cpp(DIVISOR_LINE);
      wrk_func_name.clear();
      class_name.clear();
    ;
    break;}
case 32:
{
      indent = 1;
    ;
    break;}
case 34:
{
      indent = 1;
      p = &yyvsp[0].code[0];
      print_asm();
    ;
    break;}
case 35:
{
     if (indent == 0)
      {
        newline();
        write_cpp(DIVISOR_LINE);
      }
    ;
    break;}
case 36:
{
     if (indent == 0)
      {
        newline();
        write_cpp(DIVISOR_LINE);
      }
    ;
    break;}
case 37:
{
     if (indent == 0)
      {
        newline();
        write_cpp(DIVISOR_LINE);
      }
    ;
    break;}
case 39:
{
      newline();
      write_cpp("%s;", yyvsp[-2].code.c_str());
      class_name.clear();
    ;
    break;}
case 40:
{
      newline();
      write_cpp("__declspec(dllimport) %s;\n//from: %s%s", yyvsp[-4].code.c_str(),
        yyvsp[-2].code.c_str(), yyvsp[-1].code.c_str());
      class_name.clear();  
    ;
    break;}
case 41:
{
      section = LABEL;
    ;
    break;}
case 42:
{
      section = LABEL;
      POST_ERROR;
    ;
    break;}
case 43:
{
      section = CONST;
    ;
    break;}
case 44:
{
      newline();
      write_cpp("const %s %s = %s;", const_types[yyvsp[-1].i], yyvsp[-3].code.c_str(), yyvsp[-1].code.c_str());
      if (yyvsp[-1].i == 0) yywarning("unknown type of constant");
    ;
    break;}
case 46:
{
      POST_ERROR;
    ;
    break;}
case 47:
{
      section = VAR;
    ;
    break;}
case 48:
{
      newline();
      make_list(yyvsp[-3].code);
      if (in_intf)
      {
        write_cpp("extern ");
        vars += "\n" + yyvsp[-1].code + " " + tmp_string + ";";
      }
      write_cpp("%s %s;", yyvsp[-1].code.c_str(), tmp_string.c_str());
    ;
    break;}
case 49:
{
      newline();
      tmp_string = yyvsp[-5].code.substr(0, yyvsp[-5].code.find(','));
      if (in_intf)
      {
        write_cpp("extern ");
        vars += "\n" + yyvsp[-3].code + " &" + tmp_string + " = *reinterpret_cast<" +
          yyvsp[-3].code + "*>(&(" + yyvsp[-1].code + "));";
        write_cpp("%s &%s;", yyvsp[-3].code.c_str(), tmp_string.c_str());
      }
      else
        write_cpp("%s &%s = *reinterpret_cast<%s*>(&(%s));",
          yyvsp[-3].code.c_str(), tmp_string.c_str(), yyvsp[-3].code.c_str(), yyvsp[-1].code.c_str());
    ;
    break;}
case 51:
{
      POST_ERROR;
    ;
    break;}
case 52:
{
      section = TYPE;
    ;
    break;}
case 53:
{
      type_name = yyvsp[-1].code;
    ;
    break;}
case 55:
{
      POST_ERROR;
    ;
    break;}
case 56:
{
      yyval.code.clear();
    ;
    break;}
case 57:
{
      yyval.code = yyvsp[-2].code + ';' + yyvsp[-1].code + ": " + yyvsp[0].code;
    ;
    break;}
case 60:
{
      newline();
      check_name();
      if (yyvsp[-1].code.empty())
      {
        write_cpp("extern %s %s;", (yyvsp[-2].code[0] == 'r' ? "struct" : "class"),
          type_name.c_str());
      }
      else
      {
        write_cpp("class %s : public %s\n{\npublic:", type_name.c_str(),
          yyvsp[-1].code.c_str());
        indent++;
        newline();
        write_cpp("%s(@) : %s(@) {}\n};", type_name.c_str(), yyvsp[-1].code.c_str());
        yywarning("need a constructor");
      }
      type_name.clear();
    ;
    break;}
case 62:
{
      if (!type_name.empty())
      {
        newline();
        yyval.code = type_name;
        write_cpp("typedef String %s;", type_name.c_str());
        type_name.clear();
      }
      else yyval.code = yyvsp[0].code;
    ;
    break;}
case 63:
{
      newline();
      check_name();
      yyval.code = type_name;
      write_cpp("typedef SmallString<%s> %s;", yyvsp[-1].code.c_str(), type_name.c_str());
      type_name.clear();
    ;
    break;}
case 64:
{
      newline();
      check_name();
      yyval.code = type_name;
      write_cpp("typedef String *%s;", type_name.c_str());
      type_name.clear();
    ;
    break;}
case 65:
{
      newline();
      check_name();
      yyval.code = type_name;
      write_cpp("typedef %s *%s;", yyvsp[0].code.c_str(), type_name.c_str());
      type_name.clear();
    ;
    break;}
case 66:
{
      if (!type_name.empty())
      {
        newline();
        yyval.code = type_name;
        write_cpp("typedef TMetaClass %s;", type_name.c_str());
        type_name.clear();
      }
      else yyval.code = "TMetaClass";
    ;
    break;}
case 67:
{
      if (!type_name.empty())
      {
        newline();
        yyval.code = type_name;
        write_cpp("typedef void* %s;", yyvsp[0].code.c_str(), type_name.c_str());
        type_name.clear();
      }
      else yyval.code = "void *";
    ;
    break;}
case 68:
{
      if (!type_name.empty())
      {
        newline();
        yyval.code = type_name;
        write_cpp("typedef void* %s;", yyvsp[-1].code.c_str(), type_name.c_str());
        type_name.clear();
      }
      else yyval.code = "void *";
    ;
    break;}
case 71:
{
      newline();
      write_cpp("#pragma pack(push, 1)");
    ;
    break;}
case 72:
{
      newline();
      yyval.code = yyvsp[0].code;
      write_cpp("#pragma pack(pop)");
    ;
    break;}
case 73:
{
      check_name();
      func_name = type_name;
    ;
    break;}
case 74:
{
      newline();
      yyval.code = type_name;
      write_cpp("typedef %s (%s*%s)(%s);", func_rtype.c_str(),
        yyvsp[0].code.c_str(),
        func_name.c_str(), yyvsp[-2].code.c_str());
      type_name.clear();
    ;
    break;}
case 75:
{
      check_name();
      yyval.code = type_name;
      type_name.clear();
    ;
    break;}
case 76:
{
      newline();
      yyval.code = yyvsp[-1].code;
      find_enum_descr(yyval.code);
      write_cpp("typedef Set<%s, %s, %s> %s;", yyvsp[0].code.c_str(),
        enum_descr_p->lower.c_str(), enum_descr_p->upper.c_str(), yyval.code.c_str());
      type_name.clear();
    ;
    break;}
case 77:
{
      if (!type_name.empty())
      {
        newline();
        yyval.code = type_name;
        write_cpp("typedef %s %s;", yyvsp[0].code.c_str(), type_name.c_str());
        type_name.clear();
      }
      else yyval.code = yyvsp[0].code;
    ;
    break;}
case 78:
{
      check_name();
      newline();
      yyval.code = type_name;
      write_cpp("enum %s {%s};", type_name.c_str(), yyvsp[-1].code);
      static enum_descr_t tmp = enum_descr_t("", "");
      tmp.lower.assign(yyvsp[-1].code.c_str(), yyvsp[-1].code.find(','));
      static size_t i;
      i = yyvsp[-1].code.rfind(' ', yyvsp[-1].code.length() - 1);
      tmp.upper.assign(&yyvsp[-1].code[i + 1], yyvsp[-1].code.length() - i - 1);
      strupr(&type_name[0]);
      enums.insert(make_pair(type_name, tmp));
      type_name.clear();
    ;
    break;}
case 79:
{  
      check_name();
      yyval.code = type_name;
      if (!in_arrbrack)
      {
        newline();
        write_cpp("enum %s {min%s = %s, max%s = %s};",
          type_name.c_str(), type_name.c_str(),
          yyvsp[-2].code.c_str(), type_name.c_str(), yyvsp[0].code.c_str());
      }
      enums.insert(make_pair(strupr(&type_name[0]),
        enum_descr_t(yyvsp[-2].code, yyvsp[0].code)));
      type_name.clear();
    ;
    break;}
case 80:
{
      check_name();
      yyval.code = type_name;
      type_name.clear();
    ;
    break;}
case 81:
{
      newline();
      write_cpp("typedef DynamicArray<%s> %s;", yyvsp[0].code.c_str(), yyvsp[-1].code.c_str());
      yyval.code = yyvsp[-1].code;
    ;
    break;}
case 82:
{
      check_name();
      in_arrbrack = true;
      yyval.code = type_name;
      type_name.clear();
    ;
    break;}
case 83:
{
      in_arrbrack = false;
    ;
    break;}
case 84:
{
      newline();
      if (use_starray)
      {
        write_cpp("typedef %s, %s>", yyvsp[-4].code.c_str(), yyvsp[0].code.c_str());
        for (int i = yyvsp[-4].i; i > 1; i--)
          write_cpp(" >");
        write_cpp(" %s;", yyvsp[-5].code.c_str());
      }
      else
        write_cpp("typedef %s %s%s;", yyvsp[0].code.c_str(), yyvsp[-5].code.c_str(), yyvsp[-4].code.c_str());

      yyval.code = yyvsp[-5].code;
    ;
    break;}
case 85:
{
      check_name();
      newline();
      write_cpp("%s %s", (yyvsp[-1].code[0] == 'r' ? "struct" : "class"), type_name.c_str());
      if (yyvsp[-1].code[0] == 'c' && yyvsp[0].code.empty()) yyvsp[0].code = "TObject";
      if (!yyvsp[0].code.empty())
        write_cpp(" : public %s", yyvsp[0].code.c_str());
      newline();
      write_cpp("{");
      if (!yyvsp[0].code.empty())
      {
        indent++;
        newline();
        write_cpp("typedef %s inherited;", yyvsp[0].code.c_str());
        indent--;
      }
      if (yyvsp[-1].code[0] != 'r')
      {
        newline();
        write_cpp(yyvsp[-1].code[0] == 'c' ? "__published:" : "public:");
      }
      indent++;
      if (yyvsp[-1].code[0] != 'r') class_name = type_name;
      yyval.code = type_name;
      type_name.clear();
      msg_hndlrs.clear();
    ;
    break;}
case 86:
{
      if (!msg_hndlrs.empty())
      {
        write_cpp("\nprotected:");
        newline();
        write_cpp("c_str_MESSAGE_MAP");
        indent++;
        for (slst_p = msg_hndlrs.c_str(); slst_p != msg_hndlrs.end(); slst_p++)
        {
          newline();
          write_cpp("VCL_MESSAGE_HANDLER(%s);", slst_p->c_str());
        }
        indent--;
        newline();
        write_cpp("END_MESSAGE_MAP(inherited);");
      }
      indent--;
      newline();
      write_cpp("};");
      if (yyvsp[-4].code[0] != 'r') class_name.clear();
      yyval.code = yyvsp[-2].code;
    ;
    break;}
case 87:
{
      yyval.code = yyvsp[0].code;
    ;
    break;}
case 88:
{
      yyval.code = "String";
    ;
    break;}
case 89:
{
      yyval.code = yyvsp[-2].code + ", " + yyvsp[0].code;
    ;
    break;}
case 90:
{
      yyval.code = yyvsp[-2].code + ", " + yyvsp[0].code;
    ;
    break;}
case 91:
{
     yyval.code.clear();
    ;
    break;}
case 92:
{
      yyval.code = "__closure ";
    ;
    break;}
case 93:
{
      find_enum_descr(yyvsp[0].code);
      if (use_starray)
      {
        yyval.i = 1;
        yyval.code = "StaticArray<" + enum_descr_p->lower + ", " + enum_descr_p->upper;
      }
      else
        yyval.code = '[' + enum_descr_p->upper + " - " + enum_descr_p->lower + " + 1]";
    ;
    break;}
case 94:
{
      find_enum_descr(yyvsp[0].code);
      yyval.code = yyvsp[-2].code;
      if (use_starray)
      {
        yyval.i = yyvsp[-2].i + 1;
        yyval.code += ", StaticArray<" + enum_descr_p->lower + ", " + enum_descr_p->upper;
      }
      else
        yyval.code += '[' + enum_descr_p->upper + " - " + enum_descr_p->lower + " + 1]";
    ;
    break;}
case 95:
{
      yyval.code.clear();
    ;
    break;}
case 96:
{
      yyval.code = yyvsp[-1].code.substr(0, yyvsp[-1].code.find(','));
    ;
    break;}
case 99:
{
      newline();
      write_cpp("union");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 100:
{
      indent--;
      newline();
      write_cpp("};");
    ;
    break;}
case 101:
{;
    break;}
case 103:
{
      POST_ERROR;
    ;
    break;}
case 104:
{
      indent--;
      newline();
      write_cpp("%s", yyvsp[0].code.c_str());
      indent++;
    ;
    break;}
case 105:
{
      newline();
      write_cpp("%s %s;", yyvsp[0].code.c_str(), make_list(yyvsp[-2].code).c_str());
    ;
    break;}
case 107:
{
      newline();
      write_cpp("%s;", yyvsp[0].code.c_str());
    ;
    break;}
case 108:
{
      newline();
      write_cpp("__property %s%s%s", yyvsp[-3].code.c_str(), yyvsp[-5].code.c_str(), yyvsp[-4].code.c_str());
      if (!yyvsp[-2].code.empty())
      {
        write_cpp(" =");
        indent++;
        newline();
        write_cpp("{%s}", make_list(yyvsp[-2].code).c_str());
        indent--;
      }
      write_cpp(";");
      if (!yyvsp[0].code.empty()) write_cpp("//default property!");
    ;
    break;}
case 109:
{
      yyval.code.clear();
    ;
    break;}
case 111:
{
      yyval.code.clear();
    ;
    break;}
case 112:
{
      yyvsp[-1].code += ", ";
      p = &yyvsp[-1].code[0];
      yyval.code.clear();
      int i;
      while (*p)
      {
        for (i = 0; p[i] != ','; i++);
        yyval.code += '[' + string(p, i) + ']';
        p += i + 2;
      }
    ;
    break;}
case 113:
{
      yyval.code.clear();
    ;
    break;}
case 114:
{
      yyval.code = yyvsp[0].code + " ";
    ;
    break;}
case 116:
{
      yyval.code = yyvsp[-1].code + "nodefault, ";
    ;
    break;}
case 117:
{
      yyval.code.clear();
    ;
    break;}
case 118:
{
      yyval.code = yyvsp[-2].code + strlwr(&yyvsp[-1].code[0]) + " = " + yyvsp[0].code + ", ";
    ;
    break;}
case 120:
{
      newline();
      write_cpp("%s %s;", yyvsp[0].code.c_str(), yyvsp[-2].code.c_str());
    ;
    break;}
case 125:
{ 
      newline();
      write_cpp("struct");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 126:
{
      indent--;
      newline();
      write_cpp("};");
    ;
    break;}
case 127:
{
      newline();
      if (section == CONST) write_cpp("const ");
      write_cpp("%s %s = %s;", yyvsp[-3].code.c_str(), yyvsp[-5].code.substr(0, yyvsp[-5].code.find(',')).c_str(),
        yyvsp[-1].code.c_str());
    ;
    break;}
case 128:
{
      POST_ERROR;
    ;
    break;}
case 130:
{
      yyval.code = "{" + yyvsp[-1].code + "}";
    ;
    break;}
case 131:
{
      indent ++;
      yyval.code = "\n";
      yyval.code.append(indent * tab_stops, ' ');
      yyval.code += "{\n";
      int i;
      indent++;
      p = &yyvsp[-1].code[0];
      while (*p)
      {
        for (i = 0; p[i] != '\n'; i++);
        i++;
        yyval.code.append(indent * tab_stops, ' ');
        yyval.code.append(p, i);
        p += i;
      }
      yyval.code.end()[-1] = '\n';
      indent--;
      yyval.code.append(indent * tab_stops, ' ');
      yyval.code += "}";
      indent--;
    ;
    break;}
case 133:
{
      yyval.code = yyvsp[-2].code + ",\n" + yyvsp[0].code;
    ;
    break;}
case 137:
{
      yyval.code = yyvsp[0].code + ",\n";
    ;
    break;}
case 138:
{
      yyval.code = yyvsp[-1].code + yyvsp[0].code + ",\n";
    ;
    break;}
case 139:
{
      yyval.code = "/*" + yyvsp[-2].code + "*/" + yyvsp[0].code;
    ;
    break;}
case 140:
{
      yyval.code = yyvsp[0].code + ", ";
    ;
    break;}
case 141:
{
      yyval.code = yyvsp[-2].code + yyvsp[0].code + ", ";
    ;
    break;}
case 142:
{
      switch (yyvsp[0].call_conv)
      {
        case 'm':
          tmp_string = "__msfastcall ";
          break;
        case 'c':
        case '-':
          tmp_string = "__cdecl ";
          break;
        case '\0':
          tmp_string = "__pascal ";
          break;
        case 'r':
          tmp_string = "__fastcall ";
          break;
        case 's':
          tmp_string = "__stdcall ";
          break;
        case 'f':
          tmp_string = "__safecall ";
          if (func_rtype != "void")
          {
            if (yyvsp[-3].code == "void") yyvsp[-3].code.clear();
            yyvsp[-3].code += ", ";
            yyvsp[-3].code += func_rtype + " &" + func_name + "_result";
          }  
          func_rtype = "HRESULT";
          break;
        default:
          tmp_string.clear();
      }
      if (yyvsp[-5].code[0] == 'c' || yyvsp[-5].code[0] == 'd')
      {
        yyvsp[-6].i = 0;
        func_name = class_name;
        if (yyvsp[-4].code.find(":") != -1) yyvsp[-4].code = func_name + "::";
        else yyvsp[-4].code.clear();
        if (yyvsp[-5].code[0] != 'c')
        {
          func_name = "~" + func_name;
          yyvsp[-3].code = "void";
        }
        yyvsp[-4].code += func_name;
        yyvsp[-2].code.clear();
      }
      else
      {
        if (yyvsp[-5].code[0] == 'f' && func_rtype == "void")
        {
          func_rtype = "@unknown@";
          yywarning("unknown function return type");
        }
        yyvsp[-2].code = func_rtype + " ";
      }
      if (yyvsp[-6].i)
      {
        yyval.code = "static ";
        if (yyvsp[-3].code == "void") yyvsp[-3].code = "TMetaClass *vmt";
        else yyvsp[-3].code = "TMetaClass *vmt, " + yyvsp[-3].code;
      }
      else yyval.code.clear();
      switch (yyvsp[0].i & 0x3)
      {
        case 1:
          yyval.code = "virtual ";
          break;
        case 3:
          yyval.code = "DYNAMIC ";
          break;
      }
      yyval.code += yyvsp[-2].code + tmp_string + yyvsp[-4].code + '(' + yyvsp[-3].code + ')';
      if (yyvsp[0].i & 0x4) yyval.code += " = 0";
    ;
    break;}
case 143:
{
      yyval.i = 0;
    ;
    break;}
case 144:
{
      yyval.i = FIELDED;
    ;
    break;}
case 145:
{
      func_rtype = "void";
    ;
    break;}
case 146:
{
      func_rtype = yyvsp[0].code;
    ;
    break;}
case 147:
{
      func_name = yyvsp[0].code;
    ;
    break;}
case 148:
{
      yyval.code = yyvsp[-2].code + "::" + yyvsp[0].code;
      func_name = yyvsp[0].code;
      class_name = yyvsp[-2].code;
    ;
    break;}
case 149:
{
      yyval.call_conv = default_call;
      yyval.i = 0;
    ;
    break;}
case 150:
{
      char *funcspecs[] = {"ABSTRACT",
        "VIRTUAL", "OVERRIDE", "REINTRODUCE", "DYNAMIC",
        "PASCAL", "REGISTER", "CDECL", "STDCALL", "SAFECALL"};
      int i;
      for (i = 0; i < ARRAYSIZE(funcspecs); i++)
        if (stricmp(yyvsp[-1].code.c_str(), funcspecs[i]) == 0)
          break;
      switch (i)
      {
        case 0:
          if (class_name.empty())
            yyerror("functions cannot be abstact outside classes");
          else
            yyval.i |= 0x4;
          break;
        case 1:
        case 2:
        case 3:
          yyval.i = 0x1;
          break;
        case 4:
          yyval.i = 0x3;
          break;
        case 5:
          yyval.call_conv = '\0';
          break;
        case 6:
          yyval.call_conv = 'r';
          break;
        case 7:
          yyval.call_conv = 'c';
          break;
        case 8:
          yyval.call_conv = 's';
          break;
        case 9:
          yyval.call_conv = 'f';
          break;
      }
    ;
    break;}
case 151:
{
      yyval.i = 0;
      msg_hndlrs.push_back(yyvsp[-1].code + ", " + last_partype + ", " + func_name);
    ;
    break;}
case 152:
{
      yyval.code = "void";
    ;
    break;}
case 153:
{
      yyval.code = "void";
    ;
    break;}
case 154:
{
      yyval.code = yyvsp[-1].code;
    ;
    break;}
case 156:
{
      yyval.code = yyvsp[-2].code + ", " + yyvsp[0].code;
    ;
    break;}
case 157:
{
      switch (yyvsp[-3].i)
      {
        case 0:
          if (yyvsp[-1].i == ARRAY) yyvsp[-1].code = "const " + yyvsp[-1].code;
          break;
        case VAR:
          if (yyvsp[-1].i == IDENTIFIER) yyvsp[-1].code += "&";
          break;
        case CONST:
          yyvsp[-1].code = "const " + yyvsp[-1].code;
          break;
      }
      if (!yyvsp[0].code.empty())
      {
        yyvsp[-2].code.resize(yyvsp[-2].code.find(','));
        yyval.code = yyvsp[-1].code + yyvsp[-2].code + yyvsp[0].code;
        if (yyvsp[-1].i == ARRAY) yyval.code += ", const int " + yyvsp[-2].code + "_Size";
      }
      else yyval.code = make_list(yyvsp[-2].code, yyvsp[-1].code, yyvsp[-1].i == ARRAY);
    ;
    break;}
case 158:
{
      yyval.code.clear();
    ;
    break;}
case 159:
{
      yyval.code = " = " + yyvsp[0].code;
    ;
    break;}
case 160:
{
      yyval.i = 0;
    ;
    break;}
case 161:
{
      yyval.i = VAR;
    ;
    break;}
case 162:
{
      yyval.i = CONST;
    ;
    break;}
case 163:
{
      yyval.code =  "void *";
      yyval.i = 0;
    ;
    break;}
case 164:
{
      yyval.code = yyvsp[0].code + " ";
      yyval.i = IDENTIFIER;
      last_partype = yyvsp[0].code;
    ;
    break;}
case 165:
{
      yyval.code = yyvsp[0].code + " *";
      yyval.i = ARRAY;
    ;
    break;}
case 166:
{
      yyval.code = "TVarRec *";
      yyval.i = ARRAY;
    ;
    break;}
case 168:
{
      POST_ERROR;
    ;
    break;}
case 171:
{
      POST_ERROR;
    ;
    break;}
case 175:
{
      if (stmt_need) write_cpp(";");
      stmt_need = false;
    ;
    break;}
case 176:
{
      stmt_need = false;
      newline();
      write_cpp("%s:", yyvsp[0].code.c_str());
    ;
    break;}
case 178:
{
      stmt_need = false;
      indent--;
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 179:
{
      indent--;
      newline();
      write_cpp("}");
      indent++;
    ;
    break;}
case 180:
{
      stmt_need = false;
      p = yyvsp[0].code.c_str();
      print_asm();
    ;
    break;}
case 181:
{
      stmt_need = false;
      newline();
      write_cpp("throw %s;", yyvsp[0].code.c_str());
    ;
    break;}
case 182:
{
      stmt_need = false;
      newline();
      write_cpp("__finally");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 183:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 185:
{
      newline();
      write_cpp("goto %s;", yyvsp[0].code.c_str());
    ;
    break;}
case 186:
{
      stmt_need = false;
      newline();
      write_cpp("inherited::%s(%s);", wrk_func_name.c_str(), wrk_func_params.c_str());
    ;
    break;}
case 187:
{
      stmt_need = false;
      newline();
      if (stricmp(yyvsp[0].code.c_str(), "break") == 0)
        write_cpp("break;");
      else if (stricmp(yyvsp[0].code.c_str(), "continue") == 0)
        write_cpp("continue;");
      else if (stricmp(yyvsp[0].code.c_str(), "halt") == 0)
        write_cpp("return%s", func_rtype == "void" ? ";" : " Result;");
      else if (stricmp(yyvsp[0].code.c_str(), "exit") == 0)
        write_cpp("exit(0);");
      else write_cpp("%s%s", yyvsp[0].code.c_str(), (yyvsp[0].code.end()[-1] == ')' ? ";" : "();"));
    ;
    break;}
case 188:
{
      stmt_need = false;
      newline();
      write_cpp("%s = %s;", yyvsp[-2].code.c_str(), yyvsp[0].code.c_str());
    ;
    break;}
case 190:
{
      newline();
      write_cpp("else");
      indent++;
      stmt_need = true;
    ;
    break;}
case 191:
{
      indent--;
    ;
    break;}
case 192:
{
      newline();
      yywarning("WITH statement");
      write_cpp("/* WARNING: WITH!!! (%s) */", make_list(yyvsp[-1].code).c_str());
      indent++;
      stmt_need = true;
    ;
    break;}
case 193:
{
      indent--;
    ;
    break;}
case 194:
{
      stmt_need = false;
      newline();
      write_cpp("switch (%s)", yyvsp[-1].code.c_str());
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 195:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 196:
{
      stmt_need = false;
      newline();
      if (no_tmp) yyvsp[-1].no_calc = true;
      if (!yyvsp[-1].no_calc)
      {
        write_cpp("{");
        indent++;
        newline();
        write_cpp("int %s = %s;", gen_name().c_str(), yyvsp[-1].code.c_str());
        newline();
        yyvsp[-1].code = tmp_string;
      }
      write_cpp(yyvsp[-2].i == TO ? "for (%s = %s; %s <= %s; %s++)"
        : "for (%s = %s; %s >= %s; %s--)",
        yyvsp[-5].code.c_str(), yyvsp[-3].code.c_str(),
        yyvsp[-5].code.c_str(), yyvsp[-1].code.c_str(),
        yyvsp[-5].code.c_str());
      indent++;
      stmt_need = true;
    ;
    break;}
case 197:
{
      indent--;
      if (!yyvsp[-3].no_calc)
      {
        indent--;
        newline();
        write_cpp("}");
      }
    ;
    break;}
case 198:
{
      newline();
      write_cpp("while (%s)", yyvsp[-1].code.c_str());
      indent++;
      stmt_need = true;
    ;
    break;}
case 199:
{
      indent--;
    ;
    break;}
case 200:
{
      stmt_need = false;
      newline();
      write_cpp("do");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 201:
{
      indent--;
      newline();
      write_cpp("}");
      newline();
      write_cpp("while (!(%s));", yyvsp[0].code.c_str());
    ;
    break;}
case 204:
{
      stmt_need = false;
      newline();
      write_cpp("try");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 205:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 206:
{
      newline();
      write_cpp("catch(...)");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 207:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 216:
{
      newline();
      write_cpp("catch(%s &%s)", yyvsp[-1].code.c_str(), yyvsp[-3].code.c_str());
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 217:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 218:
{
      newline();
      write_cpp("catch(%s &)", yyvsp[-1].code.c_str());
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 219:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 220:
{
      newline();
      write_cpp("catch(...)");
      newline();
      write_cpp("{");
      indent++;
    ;
    break;}
case 221:
{
      indent--;
      newline();
      write_cpp("}");
    ;
    break;}
case 222:
{
      yyval.i = TO;
    ;
    break;}
case 223:
{
      yyval.i = DOWNTO;
    ;
    break;}
case 226:
{
      newline();
      write_cpp("default:");
      indent++;
    ;
    break;}
case 227:
{
      indent--;
    ;
    break;}
case 228:
{ ;
    break;}
case 230:
{
      int i;
      p = yyvsp[0].code.c_str();
      while (*p)
      {
        for (i = 0; p[i] != ','; i++);
        newline();
        p[i] = '\0';
        write_cpp("case %s:", p);
        p += i + 2;
      }
      indent++;
    ;
    break;}
case 231:
{
      newline();
      write_cpp("break;");
      indent--;
    ;
    break;}
case 233:
{
      POST_ERROR;
      yyval.code.clear();
    ;
    break;}
case 235:
{
      POST_ERROR;
    ;
    break;}
case 236:
{
      newline();
      write_cpp("if (%s)", yyvsp[-1].code.c_str());
      indent++;
      stmt_need = true;
    ;
    break;}
case 237:
{
      stmt_need = false;
      indent--;
    ;
    break;}
case 238:
{
      yyval.i = TYPE_UNKNOWN;
      yyval.no_calc = true;
      yyval.code = yyvsp[0].code;
      if (stricmp(yyvsp[0].code.c_str(), wrk_func_name.c_str()) == 0)
        yyval.code = "Result";
      else if (!class_name.empty() && stricmp(yyvsp[0].code.c_str(), "Self") == 0)
        yyval.code = "this";
      else yyval.no_calc = false;
    ;
    break;}
case 239:
{
      yyval.i = TYPE_UNKNOWN;
      yyval.no_calc = false;
      yyval.code = "inherited::" + yyvsp[0].code;
    ;
    break;}
case 240:
{
      if (stricmp(yyvsp[-3].code.c_str(), "SIZEOF") == 0)
      {
        yyval.i = TYPE_INT;
        yyval.no_calc = true;
        yyval.code = "sizeof(" + make_list(yyvsp[-1].code) + ")";
      }
      else
      if (stricmp(yyvsp[-3].code.c_str(), "ParamStr") == 0 ||
          stricmp(yyvsp[-3].code.c_str(), "System::ParamStr") == 0)
      {
        yyval.i = TYPE_STRING;
        yyval.no_calc = true;
        yyval.code = "std::__argv[" + make_list(yyvsp[-1].code) + "]";
      }
      else
      {
        yyval.i = TYPE_UNKNOWN;
        yyval.no_calc = false;
        yyval.code = yyvsp[-3].code + "(" + make_list(yyvsp[-1].code) + ")";
      }
    ;
    break;}
case 241:
{
      yyval.i = TYPE_UNKNOWN;
      yyval.no_calc = false;
      yyval.code = yyvsp[-3].code;
      int i;
      p = yyvsp[-1].code.c_str();
      while (*p)
      {
        for (i = 0; p[i] != ','; i++);
        yyval.code += '[' + string(p, i) + ']';
        p += i + 2;
      }
    ;
    break;}
case 242:
{
      yyval.i = TYPE_UNKNOWN;
      yyval.no_calc = false;
      yyvsp[-1].code = '.';
      for (slst_p = units.c_str(); slst_p != units.end(); slst_p++)
        if (stricmp(slst_p->c_str(), yyvsp[-2].code.c_str()) == 0)
        {
          yyvsp[-2].code = *slst_p;
          yyvsp[-1].code = "::";
          break;
        }
      if (strcmp(yyvsp[-2].code.c_str(), "this") == 0) yyvsp[-1].code = "->";  
      yyval.code = yyvsp[-2].code + yyvsp[-1].code + yyvsp[0].code;
    ;
    break;}
case 243:
{
      yyval.i = TYPE_PTR;
      yyval.code = "&" + yyvsp[0].code;
    ;
    break;}
case 244:
{
      yyval.i = TYPE_UNKNOWN;
      yyval.code = "*(" + yyvsp[-1].code + ")";
    ;
    break;}
case 245:
{
      yyval.i = yyvsp[-1].i;
      yyval.code = "(" + yyvsp[-1].code + ")";
    ;
    break;}
case 246:
{
      yyval.code = yyvsp[0].code + ", ";
    ;
    break;}
case 247:
{
      yyval.code = yyvsp[-2].code + yyvsp[0].code + ", ";
    ;
    break;}
case 249:
{
      yyval.i = TYPE_BOOL;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " == " + yyvsp[0].code;
    ;
    break;}
case 250:
{
      yyval.i = TYPE_BOOL;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " " + yyvsp[-1].code + " " + yyvsp[0].code;
    ;
    break;}
case 251:
{
      yyval.i = TYPE_BOOL;
      yyval.no_calc = false;
      yyval.code = "dynamic_cast<" + yyvsp[0].code + ">(" + yyvsp[-2].code + ") != NULL";
    ;
    break;}
case 252:
{
      yyval.i = TYPE_BOOL;
      yyval.no_calc = false;
      yyval.code = yyvsp[0].code + ".Contains(" + yyvsp[-2].code + ")";
    ;
    break;}
case 253:
{
      if (stricmp(yyvsp[0].code.c_str(), "ParamCount") == 0 ||
          stricmp(yyvsp[0].code.c_str(), "System::ParamCount") == 0)
      {
        yyval.i = TYPE_INT;
        yyval.no_calc = true;
        yyval.code = "std::__argc";
      }
    ;
    break;}
case 254:
{
      yyval.no_calc = true;
    ;
    break;}
case 255:
{
      yyval.code = "{@@}";
      yywarning("set or array value definition");
    ;
    break;}
case 256:
{
      yyval.code = "{@" + make_list(yyvsp[-1].code) + "@}";
      yywarning("set or array value definition");
    ;
    break;}
case 257:
{
      yyval.i = max(yyvsp[-2].i, yyvsp[0].i);
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + (yyvsp[-2].code.end()[-1] == '\"' && yyvsp[0].code.c_str()[0] == '\"' ? " " : " + ") + yyvsp[0].code;
    ;
    break;}
case 258:
{
      yyval.i = max(yyvsp[-2].i, yyvsp[0].i);
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " - " + yyvsp[0].code;
    ;
    break;}
case 259:
{
      yyval.i = max(yyvsp[-2].i, yyvsp[0].i);
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " * " + yyvsp[0].code;
    ;
    break;}
case 260:
{
      yyval.i = TYPE_DOUBLE;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " / " + yyvsp[0].code;
    ;
    break;}
case 261:
{
      yyval.i = TYPE_INT;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " / " + yyvsp[0].code;
    ;
    break;}
case 262:
{
      yyval.i = TYPE_INT;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + " % " + yyvsp[0].code;
    ;
    break;}
case 263:
{
      yyval.i = TYPE_INT;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = yyvsp[-2].code + yyvsp[-1].code + yyvsp[0].code;
    ;
    break;}
case 264:
{
      yyval.i = yyvsp[0].i;
      yyval.no_calc = yyvsp[0].no_calc;
      yyval.code = "-" + yyvsp[0].code;
    ;
    break;}
case 265:
{
      yyval.i = yyvsp[0].i;
      yyval.no_calc = yyvsp[0].no_calc;
      yyval.code = "+" + yyvsp[0].code;
    ;
    break;}
case 266:
{
      yyval.i = max(yyvsp[-2].i, yyvsp[0].i);
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = "(" + yyvsp[-2].code +
            (yyval.i == TYPE_BOOL ? " && " : " & ") +
            yyvsp[0].code + ")";
    ;
    break;}
case 267:
{
      yyval.i = max(yyvsp[-2].i, yyvsp[0].i);
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = "(" + yyvsp[-2].code +
            (yyval.i == TYPE_BOOL ? " || " : " | ") +
            yyvsp[0].code + ")";
    ;
    break;}
case 268:
{
      yyval.i = TYPE_INT;
      yyval.no_calc = yyvsp[-2].no_calc && yyvsp[0].no_calc;
      yyval.code = "(" + yyvsp[-2].code + " ^ " + yyvsp[0].code + ")";
    ;
    break;}
case 269:
{
      yyval.i = yyvsp[0].i;
      yyval.no_calc = yyvsp[0].no_calc;
      yyval.code = (yyval.i == TYPE_BOOL ? "!" : "~") + yyvsp[0].code;
    ;
    break;}
case 270:
{
      yyval.i = TYPE_PTR;
      yyval.no_calc = false;
      yyval.code = "dynamic_cast<" + yyvsp[0].code + ">(" + yyvsp[-2].code + ")";
    ;
    break;}
case 271:
{
      yyval.code = ", ";
    ;
    break;}
case 272:
{
      yyval.code = yyvsp[0].code + ", ";
    ;
    break;}
case 273:
{
      yyval.code = yyvsp[-2].code + yyvsp[0].code + ", ";
    ;
    break;}
case 274:
{
      yyval.code = yyvsp[0].code + ", ";
    ;
    break;}
case 275:
{
      yyval.code = yyvsp[-2].code + yyvsp[0].code + ", ";
    ;
    break;}
case 277:
{
      yyval.code = "@from(" + yyvsp[-2].code + ") to (" + yyvsp[0].code + ")@";
      yywarning("range between two expressions");
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}

//---------------------------------------------------------------------------
void translate(void)
{
#if YYDEBUG
  yydebug = 1;
  freopen("pas2cpp.txt", "w+", stderr);
#endif
  ADD_ZERO_BASED("BOOL", "1");

  ADD_ZERO_BASED("CHAR", "0xFF");
  ADD_ZERO_BASED("SIGNED CHAR", "0xFF");
  ADD_ZERO_BASED("UNSIGNED CHAR", "0xFF");
  ADD_ZERO_BASED("WCHAR_T", "0xFFFF");

  ADD_ZERO_BASED("INT", "0xFFFFFFFF");
  ADD_ZERO_BASED("UNSIGNED LONG", "0xFFFFFFFF");
  ADD_ZERO_BASED("LONG", "0xFFFFFFFF");
  ADD_ZERO_BASED("SHORT", "0xFFFF");
  ADD_ZERO_BASED("BYTE", "0xFF");
  ADD_ZERO_BASED("WORD", "0xFFFF");
  ADD_ZERO_BASED("DWORD", "0xFFFFFFFF");

  units.push_back("System");
  units.push_back("Sysinit");

  int parse_ret = 1;
  try
  {
    parse_ret = yyparse();
  }
  catch(...)
  {
    fprintf(stderr, "An error occured!\n");
    return;
  }
  if (parse_ret)
    printf("File was not fully translated, stop at line %d.\n", line_no);
  else
    printf("File was fully translated.\n");
}
//---------------------------------------------------------------------------
